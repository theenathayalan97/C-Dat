
ARG BUILD_IMAGE=maven:3.5-jdk-8
ARG RUNTIME_IMAGE=openjdk:8-jdk-slim
 
#############################################################################################
###                Stage where Docker is pulling all maven dependencies                   ###
#############################################################################################
FROM ${BUILD_IMAGE} as dependencies
 
 
ARG PROXY_SET=false
ARG PROXY_HOST=
ARG PROXY_PORT=
 
COPY pom.xml ./
 
RUN mvn -B dependency:go-offline \
        -DproxySet=${PROXY_SET} \
        -DproxyHost=${PROXY_HOST} \
        -DproxyPort=${PROXY_PORT}
#############################################################################################
 
#############################################################################################
###              Stage where Docker is building spring boot app using maven               ###
#############################################################################################
FROM dependencies as build
RUN apt-get install -y git
ARG PROXY_SET=false
ARG PROXY_HOST=
ARG PROXY_PORT=
RUN mkdir -p /app
COPY . /app
WORKDIR /app
 
COPY src ./src
 
RUN mvn -B clean package \
        -DproxySet=${PROXY_SET} \
        -DproxyHost=${PROXY_HOST} \
        -DproxyPort=${PROXY_PORT}
#############################################################################################
 
#############################################################################################
###                Optional stage where Docker is running Sonar analysis                  ###
#############################################################################################
FROM build
 
#############################################################################################
 
#############################################################################################
### Stage where Docker is running a java process to run a service built in previous stage ###
#############################################################################################
FROM ${RUNTIME_IMAGE}
 
COPY --from=build /app/target/*.jar /app/service.jar
 
EXPOSE 8080
CMD ["java", "-jar", "/app/service.jar"]