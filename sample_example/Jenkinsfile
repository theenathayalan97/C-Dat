pipeline {
    agent any

    environment {

        AWS_DEFAULT_REGION = 'ap-south-1'
        AWS_ACCOUNT_ID = '602524579418'
        CODECOMMIT_REPO_URL_FRONTEND = 'https://git-codecommit.ap-south-1.amazonaws.com/v1/repos/flames_frontend'
        CODECOMMIT_REPO_URL_BACKEND = 'https://git-codecommit.ap-south-1.amazonaws.com/v1/repos/flames_backend'
        ECR_REPO_NAME_FRONTEND = 'flamesrepo_frontend'
        ECR_REPO_NAME_BACKEND = 'flamesrepo_backend'
        DOCKER_IMAGE_NAME_FRONTEND = 'ubuntu_web'
        DOCKER_IMAGE_NAME_BACKEND = 'ubuntu_api'
        DOCKER_HOST_IP = '43.204.231.116'
        DOCKER_HOST_PORT_FRONTEND = '3000'
        DOCKER_HOST_PORT_BACKEND = '8001'
        YOUR_CONTAINER_FRONTEND = '602524579418.dkr.ecr.ap-south-1.amazonaws.com/flamesrepo_frontend'
        YOUR_CONTAINER_BACKEND = '602524579418.dkr.ecr.ap-south-1.amazonaws.com/flamesrepo_backend'
        AWS_CREDENTIALS = credentials('aws_provider') // Use the ID you set in Jenkins credentials
        IMAGE_TAG_front = "sample"
        IMAGE_TAG_back = "example"
    }

    stages {
        stage('Checkout_Frontend') {
            steps {
                git branch: 'master', credentialsId: 'aws_codecommit_credentials', url: CODECOMMIT_REPO_URL_FRONTEND
            }
        }
        
        stage('Checkout_backend') {
            steps {
                git branch: 'master', credentialsId: 'aws_codecommit_credentials', url: CODECOMMIT_REPO_URL_BACKEND
            }
        }

        stage('Logging into AWS ECR') {
            steps {
                script {
                    sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                }
            }
        }

        stage('Build Docker Image frontend') {
            steps {
                script {
                    echo('build the image')
                    // Build Docker image
                    def dockerImage = docker.build("${YOUR_CONTAINER_FRONTEND}:${IMAGE_TAG_front}")
                    echo('front end image build success')
                    dockerImage.push()
                }
            }
        }

        stage('Pushing to ECR frontend') {
            steps {
                script {
                    echo('Pushing the image')
                    sh "docker tag ${YOUR_CONTAINER_FRONTEND}:${IMAGE_TAG_front} ${YOUR_CONTAINER_FRONTEND}:${IMAGE_TAG_front}"
                    sh "docker push ${YOUR_CONTAINER_FRONTEND}:${IMAGE_TAG_front}"
                    echo('Image pushed to the repository successfully')
                }
            }
        }


        stage('Deploying to Docker frontend') {
            steps {
                script {
                    // Pull the image from ECR
                    sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                    sh "docker pull ${YOUR_CONTAINER_FRONTEND}:${IMAGE_TAG_front}"
                    echo('docker image pulled')
                }
            }
        }
     
        
        stage('Check and Stop Container frontend') {
            steps {
                script {
                    echo('check & stop stage')
                    def portToStop = 3000
                    def containerIds = sh(script: "docker ps -q --filter=expose=${portToStop}", returnStdout: true).trim()
                    if (containerIds) {
                        // Split the container IDs and stop each container
                        containerIds.split("\n").each { containerId ->
                            sh "docker stop ${containerId}"
                            sh "docker rm ${containerId}"
                            echo "Stopped and removed container ID: ${containerId}"
                        }
                    } else {
                        echo "No containers found using port ${portToStop}"
                    }
                }
            }
        }

        
        stage('Run New Container frontend') {
            steps {
                script {
                    sh "docker run -d -p 4000:3000 ${YOUR_CONTAINER_FRONTEND}:${IMAGE_TAG_front}"
                }
            }
        }


         stage('Build Docker Image backend') {
            steps {
                script {
                    echo('build the back end image')
                    // Build Docker image
                    def dockerImage = docker.build("${YOUR_CONTAINER_BACKEND}:${IMAGE_TAG_back}")
                    dockerImage.push()
                }
            }
        }

        stage('Pushing to ECR backend') {
            steps {
                script {
                    echo('Pushing the image')
                    sh "docker tag ${YOUR_CONTAINER_BACKEND}:${IMAGE_TAG_back} ${YOUR_CONTAINER_BACKEND}:${IMAGE_TAG_back}"
                    sh "docker push ${YOUR_CONTAINER_BACKEND}:${IMAGE_TAG_back}"
                    echo('Image pushed to the repository successfully')
                }
            }
        }

        stage('Deploying to Docker backend') {
            steps {
                script {
                    // Pull the image from ECR
                    sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                    sh "docker pull ${YOUR_CONTAINER_BACKEND}:${IMAGE_TAG_back}"
                    echo('docker image pulled')
                }
            }
        }

          stage('Check and Stop Container backend') {
            steps {
                script {
                    echo('check & stop stage')
                    def portToStop = 8001
                    def containerIds = sh(script: "docker ps -q --filter=expose=${portToStop}", returnStdout: true).trim()
                    if (containerIds) {
                        // Split the container IDs and stop each container
                        containerIds.split("\n").each { containerId ->
                            sh "docker stop ${containerId}"
                            sh "docker rm ${containerId}"
                            echo "Stopped and removed container ID: ${containerId}"
                        }
                    } else {
                        echo "No containers found using port ${portToStop}"
                    }
                }
            }
        }


        stage('Checkout_Backend') {
            steps {
                git branch: 'master', credentialsId: 'aws_codecommit_credentials', url: CODECOMMIT_REPO_URL_BACKEND
            }
        }


        stage('Run New Container backend') {
            steps {
                script {
                    sh "docker run -d -p 9001:8001 ${YOUR_CONTAINER_BACKEND}:${IMAGE_TAG_back}"
                }
            }
        }

    }
}

